import psutil
import os
import time
import platform

def clear_screen():
    os.system("cls" if platform.system() == "Windows" else "clear")

def ascii_bar(percentage, length=20):
    filled = int(length * percentage / 100)
    return "[" + "#" * filled + "-" * (length - filled) + f"] {percentage:.1f}%"

def display_dashboard():
    while True:
        clear_screen()

        # CPU
        print("🔧 CPU Usage:")
        for i, perc in enumerate(psutil.cpu_percent(percpu=True)):
            print(f"  Core {i}: {ascii_bar(perc)}")
        print(f"  Total : {ascii_bar(psutil.cpu_percent(interval=None))}")

        # RAM
        print("\n💾 Memory:")
        ram = psutil.virtual_memory()
        print(f"  Total   : {ram.total / (1024**3):.2f} GB")
        print(f"  Used    : {ram.used / (1024**3):.2f} GB")
        print(f"  Free    : {ram.available / (1024**3):.2f} GB")

        # Disque
        print("\n🗃️ Disk Usage:")
        for part in psutil.disk_partitions():
            try:
                usage = psutil.disk_usage(part.mountpoint)
                print(f"  {part.device} ({part.mountpoint}) → {usage.percent}% used")
            except PermissionError:
                continue

        # Réseau
        print("\n🌐 Network I/O:")
        net = psutil.net_io_counters()
        print(f"  Bytes sent: {net.bytes_sent / (1024**2):.2f} MB")
        print(f"  Bytes recv: {net.bytes_recv / (1024**2):.2f} MB")
        print(f"  Packets sent: {net.packets_sent}")
        print(f"  Packets recv: {net.packets_recv}")

        # Par interface
        print("\n📡 Network interfaces:")
        net_stats = psutil.net_io_counters(pernic=True)
        for iface, stats in net_stats.items():
            print(f"  {iface}: ↓ {stats.bytes_recv / 1024:.1f} KB | ↑ {stats.bytes_sent / 1024:.1f} KB")

        # Températures (Bonus)
        if hasattr(psutil, "sensors_temperatures"):
            temps = psutil.sensors_temperatures()
            if temps:
                print("\n🌡️  CPU Temperature:")
                for name, entries in temps.items():
                    for entry in entries:
                        print(f"  {entry.label or name}: {entry.current}°C")

        # Quitter
        print("\nTapez Ctrl+C ou 'quit' pour quitter le programme.")
        time.sleep(5)

# Programme principal
if __name__ == "__main__":
    try:
        display_dashboard()
    except KeyboardInterrupt:
        print("\n✅ Fin du programme.")
