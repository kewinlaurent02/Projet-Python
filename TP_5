    import re
    import pandas as pd
    import matplotlib.pyplot as plt
    import socket
    from concurrent.futures import ThreadPoolExecutor

    # === LOGICIEL DE S√âCURIT√â ===

    def extract_ips_from_log(filepath):
        ip_pattern = re.compile(r'(?:\d{1,3}\.){3}\d{1,3}')
        ip_counts = {}

        with open(filepath, 'r') as file:
            for line in file:
                if "Failed password" in line or "404" in line:
                    match = ip_pattern.search(line)
                    if match:
                        ip = match.group()
                        ip_counts[ip] = ip_counts.get(ip, 0) + 1

        return ip_counts


    def create_dataframe(ip_dict):
        df = pd.DataFrame(list(ip_dict.items()), columns=['IP', 'Count'])
        df.sort_values(by='Count', ascending=False, inplace=True)
        return df


    def plot_top_ips(df, top_n=5):
        if df.empty:
            print("‚ö†Ô∏è Aucune donn√©e √† afficher.")
            return
        top_df = df.head(top_n)
        top_df.plot(kind='bar', x='IP', y='Count', title=f"Top {top_n} IPs", legend=False, color='orange')
        plt.ylabel("Nombre d'occurrences")
        plt.xlabel("Adresse IP")
        plt.tight_layout()
        plt.show()


    def export_to_csv(df, filename='ip_stats.csv'):
        df.to_csv(filename, index=False)
        print(f"‚úÖ Donn√©es export√©es dans {filename}")


    def scan_port(ip, port, timeout=1):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((ip, port))
            return port if result == 0 else None


    def scan_ports(ip, ports=[22, 80, 443], verbose=False):
        open_ports = []
        for port in ports:
            if scan_port(ip, port):
                open_ports.append(port)
            elif verbose:
                print(f"[Ferm√©] {ip}:{port}")
        return open_ports


    def multithreaded_scan(ip, ports=[22, 80, 443], max_threads=10):
        open_ports = []

        def check_port(port):
            if scan_port(ip, port):
                open_ports.append(port)

        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            executor.map(check_port, ports)

        return open_ports

    # === MENU INTERACTIF ===

    def main():
        df = pd.DataFrame()
        ip_data = {}

        while True:
            print("\nüìä MENU ANALYSE DE S√âCURIT√â")
            print("1. Analyser access.log")
            print("2. Analyser auth.log")
            print("3. Visualiser les IPs les plus fr√©quentes")
            print("4. Scanner les ports (mono-thread)")
            print("5. Scanner les ports (multithread)")
            print("6. Exporter les r√©sultats en CSV")
            print("7. Quitter")

            choice = input("Entrez votre choix (1-7) : ")

            if choice == "1":
                ip_data = extract_ips_from_log("access.log")
                df = create_dataframe(ip_data)
                print("‚úÖ Analyse de access.log termin√©e.")
            elif choice == "2":
                ip_data = extract_ips_from_log("auth.log")
                df = create_dataframe(ip_data)
                print("‚úÖ Analyse de auth.log termin√©e.")
            elif choice == "3":
                print("üìà Visualisation des IPs...")
                plot_top_ips(df)
            elif choice == "4":
                if df.empty:
                    print("‚ö†Ô∏è Analysez un fichier d'abord.")
                    continue
                suspicious_ips = df.head(3)['IP'].tolist()
                for ip in suspicious_ips:
                    print(f"\nüîç Scan mono-thread pour {ip}")
                    open_ports = scan_ports(ip)
                    print(f"‚úÖ Ports ouverts pour {ip} : {open_ports}")
            elif choice == "5":
                if df.empty:
                    print("‚ö†Ô∏è Analysez un fichier d'abord.")
                    continue
                suspicious_ips = df.head(3)['IP'].tolist()
                for ip in suspicious_ips:
                    print(f"\nüîç Scan multithread pour {ip}")
                    open_ports = multithreaded_scan(ip)
                    print(f"‚úÖ Ports ouverts pour {ip} : {open_ports}")
            elif choice == "6":
                if df.empty:
                    print("‚ö†Ô∏è Aucune donn√©e √† exporter.")
                    continue
                export_to_csv(df)
            elif choice == "7":
                print("üëã Au revoir !")
                break
            else:
                print("‚ùå Choix invalide. Essayez encore.")

    if __name__ == "__main__":
        main()
