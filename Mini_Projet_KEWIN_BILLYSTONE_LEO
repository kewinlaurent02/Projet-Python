import re
import pandas as pd
import matplotlib.pyplot as plt
import socket
from concurrent.futures import ThreadPoolExecutor

# ------------------------
# üîç Extraction IPs suspectes depuis un log
# ------------------------
def extract_ips_from_log(filepath):
    ip_pattern = re.compile(r'(?:\d{1,3}\.){3}\d{1,3}')
    ip_counts = {}

    with open(filepath, 'r') as file:
        for line in file:
            if "Failed password" in line or "404" in line:
                match = ip_pattern.search(line)
                if match:
                    ip = match.group()
                    ip_counts[ip] = ip_counts.get(ip, 0) + 1

    return ip_counts

# ------------------------
# üìä Analyse et graphique
# ------------------------
def create_dataframe(ip_dict):
    df = pd.DataFrame(list(ip_dict.items()), columns=['IP', 'Count'])
    df.sort_values(by='Count', ascending=False, inplace=True)
    return df

def plot_top_ips(df, top_n=5):
    top_df = df.head(top_n)
    top_df.plot(kind='bar', x='IP', y='Count', title=f"Top {top_n} IPs", legend=False, color='orange')
    plt.ylabel("Nombre d'occurrences")
    plt.xlabel("Adresse IP")
    plt.tight_layout()
    plt.show()

def export_to_csv(df, filename='ip_stats.csv'):
    df.to_csv(filename, index=False)
    print(f"‚úÖ Donn√©es export√©es dans {filename}")

# ------------------------
# üîê Scan de ports
# ------------------------
def scan_port(ip, port, timeout=1):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(timeout)
        result = sock.connect_ex((ip, port))
        return port if result == 0 else None

def scan_ports(ip, ports=[22, 80, 443], verbose=False):
    open_ports = []
    for port in ports:
        if scan_port(ip, port):
            open_ports.append(port)
        elif verbose:
            print(f"[Ferm√©] {ip}:{port}")
    return open_ports

def multithreaded_scan(ip, ports=[22, 80, 443], max_threads=10):
    open_ports = []

    def check_port(port):
        if scan_port(ip, port):
            open_ports.append(port)

    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        executor.map(check_port, ports)

    return open_ports

# ------------------------
# üöÄ Programme principal
# ------------------------
def main():
    log_path = 'auth.log'  # Remplace si besoin
    ip_data = extract_ips_from_log(log_path)
    df = create_dataframe(ip_data)

    print("üîù Top IPs suspectes :")
    print(df.head(5))

    plot_top_ips(df)
    export_to_csv(df)

    suspicious_ips = df.head(3)['IP'].tolist()
    for ip in suspicious_ips:
        print(f"\nüîç Scan de ports pour {ip}")
        open_ports = scan_ports(ip, ports=[22, 80, 443])
        print(f"‚úÖ Ports ouverts pour {ip} : {open_ports}")

if __name__ == "__main__":
    main()
